#include "string.joi"

int ROW_CHAR_SIZE=64 ;
int COLUMN_CHAR_SIZE=37;
int SCREEN_LOCK =0;

int max_com_len = 10; 

int LINE = 0;   ## current line (ROW)
int COLUMN = 0; ## current column

int focus_mode = 0;
int focus_mode_col = 0;

## prototypes
int write_char(char c_);
int write_char_at(char _c, int _line, int _col);
void save_screen();
int write_int(int _a);

int IO_DISPLAY_START = 250004;

int A;
int i;


int font_map[1024] = {
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 24, 60, 60, 24, 24, 0, 24, 0 ,
 108, 108, 0, 0, 0, 0, 0, 0 ,
 108, 108, 254, 108, 254, 108, 108, 0 ,
 48, 124, 192, 120, 12, 248, 48, 0 ,
 0, 198, 204, 24, 48, 102, 198, 0 ,
 56, 108, 56, 118, 220, 204, 118, 0 ,
 96, 96, 192, 0, 0, 0, 0, 0 ,
 24, 48, 96, 96, 96, 48, 24, 0 ,
 96, 48, 24, 24, 24, 48, 96, 0 ,
 0, 102, 60, 0, 60, 102, 0, 0 ,
 0, 48, 48, 252, 48, 48, 0, 0 ,
 0, 0, 0, 0, 0, 48, 48, 96 ,
 0, 0, 0, 252, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 48, 48, 0 ,
 6, 12, 24, 48, 96, 192, 128, 0 ,
 124, 198, 206, 222, 246, 230, 124, 0 ,
 48, 112, 48, 48, 48, 48, 252, 0 ,
 120, 204, 12, 56, 96, 204, 252, 0 ,
 120, 204, 12, 56, 12, 204, 120, 0 ,
 28, 60, 108, 204, 254, 12, 30, 0 ,
 252, 192, 248, 12, 12, 204, 120, 0 ,
 56, 96, 192, 248, 204, 204, 120, 0 ,
 252, 204, 12, 24, 48, 48, 48, 0 ,
 120, 204, 204, 120, 204, 204, 120, 0 ,
 120, 204, 204, 124, 12, 24, 112, 0 ,
 0, 48, 48, 0, 0, 48, 48, 0 ,
 0, 48, 48, 0, 0, 48, 48, 96 ,
 24, 48, 96, 192, 96, 48, 24, 0 ,
 0, 0, 252, 0, 0, 252, 0, 0 ,
 96, 48, 24, 12, 24, 48, 96, 0 ,
 120, 204, 12, 24, 48, 0, 48, 0 ,
 124, 198, 222, 222, 222, 192, 120, 0 ,
 48, 120, 204, 204, 252, 204, 204, 0 ,
 252, 102, 102, 124, 102, 102, 252, 0 ,
 60, 102, 192, 192, 192, 102, 60, 0 ,
 248, 108, 102, 102, 102, 108, 248, 0 ,
 254, 98, 104, 120, 104, 98, 254, 0 ,
 254, 98, 104, 120, 104, 96, 240, 0 ,
 60, 102, 192, 192, 206, 102, 62, 0 ,
 204, 204, 204, 252, 204, 204, 204, 0 ,
 120, 48, 48, 48, 48, 48, 120, 0 ,
 30, 12, 12, 12, 204, 204, 120, 0 ,
 230, 102, 108, 120, 108, 102, 230, 0 ,
 240, 96, 96, 96, 98, 102, 254, 0 ,
 198, 238, 254, 254, 214, 198, 198, 0 ,
 198, 230, 246, 222, 206, 198, 198, 0 ,
 56, 108, 198, 198, 198, 108, 56, 0 ,
 252, 102, 102, 124, 96, 96, 240, 0 ,
 120, 204, 204, 204, 220, 120, 28, 0 ,
 252, 102, 102, 124, 108, 102, 230, 0 ,
 120, 204, 224, 112, 28, 204, 120, 0 ,
 252, 180, 48, 48, 48, 48, 120, 0 ,
 204, 204, 204, 204, 204, 204, 252, 0 ,
 204, 204, 204, 204, 204, 120, 48, 0 ,
 198, 198, 198, 214, 254, 238, 198, 0 ,
 198, 198, 108, 56, 56, 108, 198, 0 ,
 204, 204, 204, 120, 48, 48, 120, 0 ,
 254, 198, 140, 24, 50, 102, 254, 0 ,
 120, 96, 96, 96, 96, 96, 120, 0 ,
 192, 96, 48, 24, 12, 6, 2, 0 ,
 120, 24, 24, 24, 24, 24, 120, 0 ,
 16, 56, 108, 198, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 ,
 48, 48, 24, 0, 0, 0, 0, 0 ,
 0, 0, 120, 12, 124, 204, 118, 0 ,
 224, 96, 96, 124, 102, 102, 220, 0 ,
 0, 0, 120, 204, 192, 204, 120, 0 ,
 28, 12, 12, 124, 204, 204, 118, 0 ,
 0, 0, 120, 204, 252, 192, 120, 0 ,
 56, 108, 96, 240, 96, 96, 240, 0 ,
 0, 0, 118, 204, 204, 124, 12, 248 ,
 224, 96, 108, 118, 102, 102, 230, 0 ,
 48, 0, 112, 48, 48, 48, 120, 0 ,
 12, 0, 12, 12, 12, 204, 204, 120 ,
 224, 96, 102, 108, 120, 108, 230, 0 ,
 112, 48, 48, 48, 48, 48, 120, 0 ,
 0, 0, 204, 254, 254, 214, 198, 0 ,
 0, 0, 248, 204, 204, 204, 204, 0 ,
 0, 0, 120, 204, 204, 204, 120, 0 ,
 0, 0, 220, 102, 102, 124, 96, 240 ,
 0, 0, 118, 204, 204, 124, 12, 30 ,
 0, 0, 220, 118, 102, 96, 240, 0 ,
 0, 0, 124, 192, 120, 12, 248, 0 ,
 16, 48, 124, 48, 48, 52, 24, 0 ,
 0, 0, 204, 204, 204, 204, 118, 0 ,
 0, 0, 204, 204, 204, 120, 48, 0 ,
 0, 0, 198, 214, 254, 254, 108, 0 ,
 0, 0, 198, 108, 56, 108, 198, 0 ,
 0, 0, 204, 204, 204, 124, 12, 248 ,
 0, 0, 252, 152, 48, 100, 252, 0 ,
 28, 48, 48, 224, 48, 48, 28, 0 ,
 24, 24, 24, 0, 24, 24, 24, 0 ,
 224, 48, 48, 28, 48, 48, 224, 0 ,
 118, 220, 0, 0, 0, 0, 0, 0 ,
 0, 0, 0, 0, 0, 0, 0, 0 
};

int OS_mread(int addr):
    return 0;
:

int OS_mwrite(int data, int addr_):
    return 0;
:

void clear_screen():
    if SCREEN_LOCK == 0:
    {
        A = IO_DISPLAY_START+4799;
        for i = A; i >= IO_DISPLAY_START; i--:
        {
            OS_mwrite(0, i);
        }

        LINE = 0;
        COLUMN = 0;
    }
:

int write_char(int c):
    
    if SCREEN_LOCK == 0:{

        if c == 10:{
            COLUMN = 0;
            LINE += 8;
            if LINE == 8 * COLUMN_CHAR_SIZE:{
                LINE = 0;
                COLUMN = 0;
                clear_screen();
                ##return 1;                                               
            }

            ##return 0;
        }
        else if c == 95: {             
            COLUMN++;

            if COLUMN == ROW_CHAR_SIZE:
            {                                                               ##  if the row is full
                COLUMN = 0;
                LINE += 8;
                if LINE >= 8 * COLUMN_CHAR_SIZE:
                {
                    LINE = 0;
                    COLUMN = 0;
                    ##return 1;
                }
            }
        }
        else if c == 13:   ## '\r'
        {
            COLUMN = 0;
            ##return 0;
        }
        else if c == 12:                  ## '\f'
        {
            LINE += 8;
            if LINE >= 8 * COLUMN_CHAR_SIZE:
            {
                LINE = 0;
                COLUMN = 0;
                ##return 1;
            }

            ##return 0;
        }
        else if c == 9:   ##'\t'
        {
            COLUMN += 4;
            if COLUMN >= ROW_CHAR_SIZE:
            {
                COLUMN = 0;
                LINE += 8;
                if LINE >= 8 * COLUMN_CHAR_SIZE:
                {
                    LINE = 0;
                    COLUMN = 0;
                    ##return 1;
                }
            }

            ##return 0;
        }
        else if c == 8 :             ## '\b'
        {
            if COLUMN == 0:
            {
                if LINE == 0:
                {
                    ##return 0;
                }
                else:
                {
                    COLUMN = ROW_CHAR_SIZE - 1;
                    LINE -= 8;
                }
            }
            else:
            {
                COLUMN--;
            }

            A = IO_DISPLAY_START + ROW_CHAR_SIZE * LINE/4 + COLUMN/4;

            for i = 0; i < 8; i++:
            {
                int read = OS_mread(A+ROW_CHAR_SIZE/4*i); 
                int write = read/256;
                int j=COLUMN%4;
                for int q=3; q>j;q--:{
                    write=write/256;
                }
                OS_mwrite(write, A+ROW_CHAR_SIZE/4*i);
            }

            ##return 0;
        }
        else:
        {
            int font[8];
            ##std::cout<<font_map[c];
            for i=0;i<8;i++:{
                font[i]=font_map[c*128+i];
            }

             A = IO_DISPLAY_START + ROW_CHAR_SIZE * LINE/4 + COLUMN/4; ## location of the first character in the line
            for i = 0; i < 8; i++:
            {
                read = OS_mread(A+ROW_CHAR_SIZE/4*i);
                write = font[i];
                j=COLUMN%4;
                for  q=3; q>j;q-- :{
                    write=write*256;
                }
                OS_mwrite(write+read, A+ROW_CHAR_SIZE/4*i);    
            }

            COLUMN++;
            if COLUMN == ROW_CHAR_SIZE:
            { ## if the row is full
                COLUMN = 0;
                LINE += 8;
                ##return 0;
            }

            if LINE == 8 * COLUMN_CHAR_SIZE:
            { ## if the screen is full
                LINE = 0;
                COLUMN = 0;

                ##return 1;
            }

            ##return 0;
        }
    }
    return 1;
:

int write_string(char $printstr):
    for int i = 0; i < strlen($printstr); i++ :
    {
        write_char($printstr[i]);
    }
: